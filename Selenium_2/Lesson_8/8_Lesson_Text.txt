На самом деле сами того не замечая, мы вводим данные в текстовые поля десятки, а то и сотни раз в день.
Для такой простой и часто используемой операции существует метод send_keys()
К тестовым полям можно отнести теги <input/> и <textarea>.
Существует два способа ввода текста, через переменную и напрямую:

- Способ 1 - Ввод данных напрямую
# Ищем текстовое поле и вписываем туда текст
driver.find_element("xpath", "//input[@id='email']").send_keys("ваш email")
В данном способе используя точку, мы применяем метод send_keys() сразу к найденному элементу.

- Способ 2 - Ввод данных через переменную
# Записываем найденный элемент (text box) в переменную
email_field = driver.find_element("xpath", "//input[@id='email']")

# Обращаясь к переменной с найденным элементом вызываем метод send_keys()
email_field.send_keys("ваш email")
В этом же способе записывая элемент в переменную мы применяем к нему метод send_keys()

Способ 1 хорош, но более правильным и удобным способом будет занесение элемента в переменную, т.е Способ 2. В дальнейшем
мы с вами в этом убедимся.

В процессе работы Вам часто придётся проверять и сравнивать значения из различных полей. Для таких целей используется метод get_attribute(“value”)
Давайте усовершенствуем процесс ввода логина в поле email и проверим значение в поле после ввода логина

Алгоритм:

Найдём элемент поля ввода
Убедимся что поле пустое
Введём логин
Проверим что в поле email действительно введён логин
# Записываем найденный элемент (text box) в переменную
email_field = driver.find_element("xpath", "//input[@id='email']")

# Проверяем, что в поле пусто
assert email_field.get_attribute("value") == ""

# Вводим логин в поле email
email_field.send_keys("example@yandex.ru")

# Записываем значение поля в переменную
email_field_value = email_field.get_attribute("value")

# Проверяем, что в поле email содержится введенный логин
assert "example@yandex.ru" in email_field_value
На самом деле, вы можете получить любой атрибут у любого элемента с помощью метода get_attribute()

Давайте рассмотрим простой пример с ссылкой ниже
<a href="/study-plan" class="nav-link" target="_self" data-component-name="BLink">Study plan</a>
Теперь по очереди получим все ее атрибуты, чтобы закрепить материал

MY_LINK = driver.find_element("xpath", "//a[text()='Study plan']")

print(MY_LINK.get_attribute("href"))

print(MY_LINK.get_attribute("class"))

print(MY_LINK.get_attribute("target"))

print(MY_LINK.get_attribute("data-component-name"))
Таким образом будут напечатаны все значения всех выбранных атрибутов.


Бывают моменты, когда в поле ввода уже есть значение, давайте рассмотрим такой случай на примере профиля.
Давайте попробуем использовать уже знакомый нам метод send_keys() чтобы изменить поле Имени.

# Тут мы нашли поле ввода First Name и ввели новое новое значение 'Alexey'
driver.find_element("xpath", "//input[@id='first-name']").send_keys("Alexey")
В результате выполнения, мы бы получили следующую картину

Первоначальное значение в поле First Name слилось с новым введенным нами значением, причиной является то, что метод send_keys()
не обращает внимание на то, пустое поле или нет.
Чтобы избежать таких ситуаций, нам нужно использовать метод clear() перед тем как вносить новые значение используя send_keys().

# Заносим найденное поле First Name в переменную для удобства
first_name = driver.find_element("xpath", "//input[@id='first-name']")

# Очищаем поле First Name
first_name.clear()
В результате мы получим очищенное поле First Name
Давайте теперь напишем полноценный сценарий смены First Name

# Заносим найденное поле First Name в переменную для удобства
first_name = driver.find_element("xpath", "//input[@id='first-name']")
# Очищаем поле First Name
first_name.clear()
# Проверяем, что в поле пусто
assert first_name.get_attribute("value") == ""
# Вводим новое значение в поле First Name
first_name.send_keys("Alexey")
# Проверяем что в поле First Name содержится введенное нами значение "Alexey"
assert "Alexey" in first_name.get_attribute("value")

Данный метод очень важен, так как не редко может привести к ошибкам и некорректной работе тестов при автоматизации.